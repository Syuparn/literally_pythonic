# literally_pythonic
convert your Python codes into literally "Pythonic" shape!

Python code is easy to read and write.

```python
for i in range(100):
    if i % 15 == 0:
        print('fizzbuzz')
    elif i % 3 == 0:
        print('fizz')
    elif i % 5 == 0:
        print('buzz')
    else:
        print(i)
```

But that's not "Pythonic"(snake-liked) shape, is it?

This module allows you to write literally "Pythonic" code easily!

```python
from ___ import _

```

# usage
- ___.py: module to run "Pythonic" code
- encode.py: convert codes into "Pythonic" code